"""
Django settings for director project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys
from typing import Container, Iterable, List, Pattern, Union

import Crypto.PublicKey.RSA

from directorutil.crypto import import_rsa_key_from_file

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "1=8bz5v!#jke@p!&8x1=u-6%(m4(+s_pmgk9&)36nnduta(6io"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "director",
    "director.csl.tjhsst.edu",
    "director.tjhsst.edu",
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "social_django",
    "channels",
    "django_extensions",
    "director.apps.auth",
    "director.apps.users",
    # We need to specify the full path to the config class
    # because it does some custom initialization.
    "director.apps.sites.apps.SitesConfig",
    "director.apps.request",
    "director.apps.docs",
    "director.apps.shell_server",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "director.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "director.apps.context_processors.base_context",
            ]
        },
    }
]

WSGI_APPLICATION = "director.wsgi.application"
ASGI_APPLICATION = "director.routing.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

AUTHENTICATION_BACKENDS = ("director.apps.auth.oauth.IonOauth2",)

SOCIAL_AUTH_USER_FIELDS = [
    "username",
    "first_name",
    "last_name",
    "email",
    "id",
    "is_teacher",
    "is_student",
    "graduation_year",
]

SOCIAL_AUTH_URL_NAMESPACE = "social"

SOCIAL_AUTH_PIPELINE = (
    "social_core.pipeline.social_auth.social_details",
    "social_core.pipeline.social_auth.social_uid",
    "social_core.pipeline.social_auth.auth_allowed",
    "social_core.pipeline.social_auth.social_user",
    "director.apps.auth.oauth.get_username",
    "social_core.pipeline.social_auth.associate_by_email",
    "social_core.pipeline.user.create_user",
    "social_core.pipeline.social_auth.associate_user",
    "social_core.pipeline.social_auth.load_extra_data",
)

AUTH_USER_MODEL = "users.User"

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/New_York"

USE_I18N = True

USE_L10N = True

USE_TZ = True


LOGIN_URL = "auth:login"
LOGIN_REDIRECT_URL = "auth:index"
LOGOUT_REDIRECT_URL = "auth:index"

SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_AGE = 2 * 7 * 24 * 60 * 60
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

SOCIAL_AUTH_ALWAYS_ASSOCIATE = True
SOCIAL_AUTH_LOGIN_ERROR_URL = "/"
SOCIAL_AUTH_RAISE_EXCEPTIONS = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "serve")
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)

# Celery
CELERY_BROKER_URL = "redis://localhost:6379/2"
# Celery will import these modules to try to find tasks
# If a task is not in a director/apps/<app name>/tasks.py, it should
# be added here
CELERY_IMPORTS = ["director.utils.emails"]

# Channels
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {"hosts": [{"address": ("127.0.0.1", 6379), "db": 0}], "prefix": "asgi:"},
    }
}

# Caching
CACHES = {
    "default": {
        "BACKEND": "redis_cache.RedisCache",
        "LOCATION": ["127.0.0.1:6379"],
        "OPTIONS": {"DB": 1},
    },
}


# Director-related stuff

# This can contain HTML and it will be rendered. Be careful!
HOMEPAGE_BANNER: str = ""

# Site name blacklisting/whitelisting

# Sites with these names will be allowed, even if they are blacklisted below.
WHITELISTED_SITE_NAMES: Container[str] = set()

# Creating sites with these names that are in BLACKLISTED_SITE_NAMES, or with names that match a
# regular expression in BLACKLISTED_SITE_REGEXES (for efficiency, regexes must be compiled with
# re.compile()), will be blocked (unless they are whitelisted above).
# Editing sites with these names may also not work properly, so sites should be deleted before
# blacklisting their name or blacklisting by regex.
BLACKLISTED_SITE_NAMES: Container[str] = set()
BLACKLISTED_SITE_REGEXES: Iterable[Pattern[str]] = []


# The URL that will be used for various site types.
# The site name is interpolated into this using str.format(). It is guaranteed to be
# URL/domain-safe.
# The key indicates that this format should be used for a given site "purpose" (e.g. the "user"
# URL is used for user sites). The "None" key indicates the default format if there is not an
# explicit entry for a given site's "purpose" (and it MUST be specified).
SITE_URL_FORMATS = {
    "user": "https://user.tjhsst.edu/{}/",
    "activity": "https://activities.tjhsst.edu/{}/",
    "legacy": "https://www.tjhsst.edu/~{}/",
    None: "https://{}.sites.tjhsst.edu",
}


# The URL where Director can be accessed.
DIRECTOR_URL = "https://director.tjhsst.edu"

# The FQDN for which custom domain sites should be CNAMEd to.
# Do not use an alias if CNAME chaining; rather, use the root CNAME.
DIRECTOR_CUSTOM_DOMAIN_FQDN_CNAME = "director.csl.tjhsst.edu"

# A list of the hosts each of the appservers are running on (or can be reached
# on via some kind of proxy).
# These are host:port combos. They are NOT URLs. This list should also not be
# taken from unsafe sources, as they may be interpolated into URLs without any
# form of escaping or validation.
# Example: ["localhost:5443", "director-app1.example.com:5443"]
DIRECTOR_APPSERVER_HOSTS: List[str] = []

# Same as DIRECTOR_APPSERVER_HOSTS, but for the websocket server. Can be
# copied from DIRECTOR_APPSERVER_HOSTS.
DIRECTOR_APPSERVER_WS_HOSTS: List[str] = []

# Set this to None to disable SSL. Set it to a dictionary like this to enable SSL:
# {
#     "cafile": "<path to CA file used to verify appserver certificates>",
#     "client_cert": {
#         "certfile": "<path to client certificate file>",  # Required
#         "keyfile": "<path to client private key file>",  # Taken from certfile if not passed
#         "password": "<private key password>",  # Required if private key is encryped
#     },
# }
# Yes, the SSL settings must be the same for all appservers. This is by design.
DIRECTOR_APPSERVER_SSL = None

# The default timeout to use when connecting to the appservers.
DIRECTOR_APPSERVER_DEFAULT_TIMEOUT = 15

# These are the same as DIRECTOR_APPSERVER_HOSTS, DIRECTOR_APPSERVER_SSL, and
# DIRECTOR_BALANCER_DEFAULT_TIMEOUT above,
# but for connecting to the balancers.
DIRECTOR_BALANCER_HOSTS: List[str] = []
DIRECTOR_BALANCER_SSL = None
DIRECTOR_BALANCER_DEFAULT_TIMEOUT = 15

# These are the only IPs that will be allowed to scrape Prometheus metrics.
# (Superusers are whitelisted as well.)
ALLOWED_METRIC_SCRAPE_IPS: List[str] = []

DIRECTOR_APPLICATION_NAME = "Director"

# All generated database passwords will be this long.
DIRECTOR_DATABASE_PASSWORD_LENGTH = 50

# All new sites will be assigned this Docker image. It should be
# "docker pull"-able from each appserver somehow (from Docker Hub, locally built,
# or in a registry).
# This should almost always be a ":latest" image.
# WARNING: Do not try to delete the DockerImage specified here! Weird things may happen.
DIRECTOR_DEFAULT_DOCKER_IMAGE = "alpine:latest"

# These attributes will be set on the default image:
# The friendly_name for the Docker image.
DIRECTOR_DEFAULT_DOCKER_IMAGE_FRIENDLY_NAME = "Alpine"
# See the description of DockerImage.install_command in director/apps/sites/models.py
DIRECTOR_DEFAULT_DOCKER_IMAGE_INSTALL_COMMAND_PREFIX = "apk add --"

DIRECTOR_DOCS_DIR = "/usr/local/www/director-docs"
DIRECTOR_DOCS_CACHE_TIMEOUT = 24 * 60 * 60

# Fractions of a CPU
DIRECTOR_RESOURCES_DEFAULT_CPUS: float = 0.6
# Memory in bytes
DIRECTOR_RESOURCES_DEFAULT_MEMORY_LIMIT: int = 100 * 1000 * 1000
# Client body (aka file upload) size limit
# This *can* be a string, in which case it will be sent directly to Nginx.
# However, it's recommended to keep it as an int to lessen the possibility of
# typos breaking sites.
DIRECTOR_RESOURCES_DEFAULT_CLIENT_BODY_LIMIT: Union[int, str] = 2 * 1024 * 1024

DIRECTOR_SITE_STUDENT_AGREEMENT_HELP_TEXT = (
    "I have read, understood, and agree to abide by the rules outlined in the "
    "Computer Systems Lab Policy, the "
    "<a href='#' data-toggle='modal' data-target='#guidelines-modal'>TJHSST Website "
    "Guidelines</a>, the <a href='https://www.fcps.edu/about-fcps/"
    "policies-regulations-and-notices/"
    "student-rights-and-responsibilities/appendices"
    "#appendix-a-acceptable-use-policy-for-student-network-access'>"
    "FCPS Acceptable Use Policy for Student Network Access</a>, "
    "and the <a href='https://www.fcps.edu/srr'>FCPS Student Rights and Responsibilities</a>. "
    "I understand that the above services may be revoked at any time and other disciplinary "
    "actions may occur if I directly or indirectly violate any guidelines as outlined in the above "
    "policies."
)

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "mail.tjhsst.edu"
EMAIL_PORT = 587
EMAIL_USE_TLS = True

EMAIL_SUBJECT_PREFIX = "[Director] "
EMAIL_FROM = "director-noreply@tjhsst.edu"

# If this is set to True, emails will be sent in debug mode (the default is to just print out the
# plaintext version). This does NOT affect setups where DEBUG=False (most notably production).
DEBUG_EMAIL_SEND = False

# Unlike DEBUG_EMAIL_SEND, this is a blanket send/don't send, in both dev environments and
# production. Another notable difference is that the email is simply discarded, not printed out.
ENABLE_EMAIL_SEND = True

DIRECTOR_CONTACT_EMAIL = "director@tjhsst.edu"

SHELL_SIGNING_TOKEN_PRIVATE_KEY_PATH = "/etc/director-shell-keys/shell-signing-token-privkey.pem"
SHELL_ENCRYPTION_TOKEN_PUBLIC_KEY_PATH = (
    "/etc/director-shell-keys/shell-encryption-token-pubkey.pem"
)

SHELL_AUTH_KINIT_REALM = "CSL.TJHSST.EDU"
SHELL_AUTH_KINIT_TIMEOUT: Union[int, float] = 15

# These options control what is removed when a site is deleted.
# If SITE_DELETION_REMOVE_FILES is True, all of the site's files are removed. (It
# may make sense to set this to False so users' files can be recovered later, though
# the site ID would need to be known.)
# If SITE_DELETION_REMOVE_DATABASE is True, the site's database is removed. (It is
# strongly recommended to leave this as True to avoid clogging up the database
# server.)
SITE_DELETION_REMOVE_FILES: bool = True
SITE_DELETION_REMOVE_DATABASE: bool = True

try:
    from .secret import *  # noqa  # pylint: disable=unused-import
except ImportError:
    pass

CSRF_COOKIE_SECURE = SESSION_COOKIE_SECURE = not DEBUG

assert len(DIRECTOR_APPSERVER_HOSTS) == len(
    DIRECTOR_APPSERVER_WS_HOSTS
), "DIRECTOR_APPSERVER_HOSTS and DIRECTOR_APPSERVER_WS_HOSTS must be the same length"

# We allow string memory limits in the model, but that's because we can do validation there.
# If we allowed strings here, then a typo while editing secret.py could make nearly all sites on
# Director break when certain operations are performed.
assert (
    isinstance(DIRECTOR_RESOURCES_DEFAULT_MEMORY_LIMIT, int)
    and DIRECTOR_RESOURCES_DEFAULT_MEMORY_LIMIT > 0
), "DIRECTOR_RESOURCES_DEFAULT_MEMORY must be a positive integer"

DIRECTOR_NUM_APPSERVERS = len(DIRECTOR_APPSERVER_HOSTS) if DIRECTOR_APPSERVER_HOSTS else 0
DIRECTOR_NUM_BALANCERS = len(DIRECTOR_BALANCER_HOSTS) if DIRECTOR_BALANCER_HOSTS else 0

if os.path.basename(sys.argv[0]) == "mypy" or (
    os.path.basename(sys.argv[0]) == "__main__.py"
    and os.path.basename(os.path.dirname(sys.argv[0])) == "mypy"
):
    # The Mypy Django plugin that we use tries to extract important information by loading Django
    # and performing some initialization.
    # The problem is, we want to be able to perform type checking in situations where these keys
    # are unavailable -- for example, in a repo set up for development but outside the Vagrant VM.
    # So if we're running in Mypy, generate a random dummy key to use here.
    # We can't check `typing.TYPE_CHECKING` because this is actually imported by the plugin, not
    # during the type checking phase

    SHELL_SIGNING_TOKEN_PRIVATE_KEY = Crypto.PublicKey.RSA.generate(1024)
    SHELL_ENCRYPTION_TOKEN_PUBLIC_KEY = SHELL_SIGNING_TOKEN_PRIVATE_KEY.publickey()
else:
    SHELL_SIGNING_TOKEN_PRIVATE_KEY = import_rsa_key_from_file(SHELL_SIGNING_TOKEN_PRIVATE_KEY_PATH)
    SHELL_ENCRYPTION_TOKEN_PUBLIC_KEY = import_rsa_key_from_file(
        SHELL_ENCRYPTION_TOKEN_PUBLIC_KEY_PATH
    )
